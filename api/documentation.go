/*
 * Growd Document Generator
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.11
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package compute

import (
	"log"
	"net/http"
	"os"
	"strings"
)

// OpenApiController binds http requests to an api service and writes the service results to the http response
type DocumentationController struct {
	errorHandler ErrorHandler
}

// OpenApiOption for how the controller is set up.
type DocumentationOption func(*DocumentationController)

// WithOpenApiErrorHandler inject ErrorHandler into controller
func WithDocumentationErrorHandler(h ErrorHandler) DocumentationOption {
	return func(c *DocumentationController) {
		c.errorHandler = h
	}
}

// NewOpenApiController creates a default api controller
func NewDocumentationController(opts ...DocumentationOption) Router {
	controller := &DocumentationController{

		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OpenApiController
func (c *DocumentationController) Routes() Routes {
	return Routes{
		{
			"Documentation",
			strings.ToUpper("Get"),
			"/doco",
			c.Documentation,
		},
	}
}

// OpenApiSpec -
func (c *DocumentationController) Documentation(w http.ResponseWriter, r *http.Request) {
	f, err := os.Open("web/redoc.html")
	if err != nil {
		log.Fatalln(err.Error())
	}
	fi, err := f.Stat()
	if err != nil {
		log.Fatalln(err.Error())
	}
	buf := make([]byte, fi.Size())
	f.Read(buf)

	w.Header().Set("Content-Type", "text/html; charset=UTF-8")
	w.Write(buf)
	// If an error occurred, encode the error with the status code
	if err != nil {
		w.WriteHeader(400)
		return
	}
	// If no error, encode the body and the result code

}
